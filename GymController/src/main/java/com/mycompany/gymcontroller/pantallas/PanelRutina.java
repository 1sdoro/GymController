/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.gymcontroller.pantallas;


import com.mycompany.gymcontroller.GymController;
import com.mycompany.gymcontroller.controllers.EjercicioController;
import com.mycompany.gymcontroller.modelo.Ejercicio;
import java.awt.Component;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.BoxLayout;
import javax.swing.JCheckBox;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

/**
 *
 * @author William Arias
 */
public class PanelRutina extends javax.swing.JPanel {


    EjercicioController e = new EjercicioController();
    // Declarar los componentes de la interfaz panelCheckBoxes seleccionarRutinasPanel






    // Constructor de la clase
    public PanelRutina() {
        initComponents(); 
        
        
    }
    

    // Método para cargar los ejercicios en el panel
    public void cargarEjercicios(GymController gymController) {
    // Obtener la lista de ejercicios desde el GymController
    List<Ejercicio> listaEjercicios = e.obtenerEjercicios();
    
    // Limpiar cualquier contenido previo del panel de checkboxes
    panelCheckBoxes.removeAll();

    // Añadir un JCheckBox para cada ejercicio
    for (Ejercicio ejercicio : listaEjercicios) {
        JCheckBox checkBox = new JCheckBox(ejercicio.getNombre()); // Crear checkbox con el nombre del ejercicio
        panelCheckBoxes.add(checkBox); // Añadir el checkbox al panel
    }

    // Actualizar la vista para que se reflejen los cambios
    panelCheckBoxes.revalidate();
    panelCheckBoxes.repaint();
}
    
    public void cargarRutinas(List<Ejercicio> ejercicios) {
    // Convertir la lista de objetos `Ejercicio` a una lista de nombres (String)
    List<String> nombresEjercicios = ejercicios.stream()
                                               .map(Ejercicio::getNombre)
                                               .collect(Collectors.toList());

    
}

    // Este método es llamado al hacer clic en el botón de "Cargar Ejercicios"


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCargarEjercicios = new javax.swing.JButton();
        btnGuardarSeleccion = new javax.swing.JButton();
        scrollPanelEjercicios = new javax.swing.JScrollPane();
        panelCheckBoxes = new javax.swing.JPanel();

        setBackground(new java.awt.Color(0, 0, 0));

        btnCargarEjercicios.setText("Cargar ejercicios");
        btnCargarEjercicios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarEjerciciosActionPerformed(evt);
            }
        });

        btnGuardarSeleccion.setText("Guardar Seleccion");
        btnGuardarSeleccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarSeleccionActionPerformed(evt);
            }
        });

        panelCheckBoxes.setLayout(new javax.swing.BoxLayout(panelCheckBoxes, javax.swing.BoxLayout.Y_AXIS));
        scrollPanelEjercicios.setViewportView(panelCheckBoxes);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCargarEjercicios)
                        .addGap(355, 355, 355)
                        .addComponent(btnGuardarSeleccion))
                    .addComponent(scrollPanelEjercicios, javax.swing.GroupLayout.PREFERRED_SIZE, 599, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(62, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(scrollPanelEjercicios, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCargarEjercicios)
                    .addComponent(btnGuardarSeleccion))
                .addGap(50, 50, 50))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCargarEjerciciosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarEjerciciosActionPerformed
        
btnCargarEjercicios.addActionListener(e -> {
    
    GymController gymController = new GymController();
    cargarEjercicios(gymController);
});

    }//GEN-LAST:event_btnCargarEjerciciosActionPerformed

    private void btnGuardarSeleccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarSeleccionActionPerformed

        // Crear una lista para almacenar los ejercicios seleccionados
    List<Ejercicio> ejerciciosSeleccionados = new ArrayList<>();

    // Iterar sobre los checkboxes en el panel
    for (Component comp : panelCheckBoxes.getComponents()) {
        if (comp instanceof JCheckBox) {
            JCheckBox checkBox = (JCheckBox) comp;
            if (checkBox.isSelected()) {
                String nombreEjercicio = checkBox.getText();
                Ejercicio ejercicio = buscarEjercicioPorNombre(nombreEjercicio);
                if (ejercicio != null) {
                    ejerciciosSeleccionados.add(ejercicio);  // Añadir el ejercicio seleccionado a la lista
                }
            }
        }
    }

    // Pasar los ejercicios seleccionados al método cargarRutinas
    cargarRutinas(ejerciciosSeleccionados);

    }//GEN-LAST:event_btnGuardarSeleccionActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCargarEjercicios;
    private javax.swing.JButton btnGuardarSeleccion;
    private javax.swing.JPanel panelCheckBoxes;
    private javax.swing.JScrollPane scrollPanelEjercicios;
    // End of variables declaration//GEN-END:variables

    private Ejercicio buscarEjercicioPorNombre(String nombreEjercicio) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    // Variables de instancia para GymController y Lista de Ejercicios

}

